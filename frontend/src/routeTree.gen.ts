/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as ContactIndexRouteImport } from './routes/contact/index'
import { Route as ApplicationsIndexRouteImport } from './routes/applications/index'
import { Route as ApplicationsCreateRouteImport } from './routes/applications/create'
import { Route as ApplicationsViewApplicationIdRouteImport } from './routes/applications/view/$applicationId'
import { Route as ApplicationsEditApplicationIdRouteImport } from './routes/applications/edit/$applicationId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactIndexRoute = ContactIndexRouteImport.update({
  id: '/contact/',
  path: '/contact/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApplicationsIndexRoute = ApplicationsIndexRouteImport.update({
  id: '/applications/',
  path: '/applications/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApplicationsCreateRoute = ApplicationsCreateRouteImport.update({
  id: '/applications/create',
  path: '/applications/create',
  getParentRoute: () => rootRouteImport,
} as any)
const ApplicationsViewApplicationIdRoute =
  ApplicationsViewApplicationIdRouteImport.update({
    id: '/applications/view/$applicationId',
    path: '/applications/view/$applicationId',
    getParentRoute: () => rootRouteImport,
  } as any)
const ApplicationsEditApplicationIdRoute =
  ApplicationsEditApplicationIdRouteImport.update({
    id: '/applications/edit/$applicationId',
    path: '/applications/edit/$applicationId',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/applications/create': typeof ApplicationsCreateRoute
  '/applications': typeof ApplicationsIndexRoute
  '/contact': typeof ContactIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/applications/edit/$applicationId': typeof ApplicationsEditApplicationIdRoute
  '/applications/view/$applicationId': typeof ApplicationsViewApplicationIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/applications/create': typeof ApplicationsCreateRoute
  '/applications': typeof ApplicationsIndexRoute
  '/contact': typeof ContactIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/applications/edit/$applicationId': typeof ApplicationsEditApplicationIdRoute
  '/applications/view/$applicationId': typeof ApplicationsViewApplicationIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/applications/create': typeof ApplicationsCreateRoute
  '/applications/': typeof ApplicationsIndexRoute
  '/contact/': typeof ContactIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/applications/edit/$applicationId': typeof ApplicationsEditApplicationIdRoute
  '/applications/view/$applicationId': typeof ApplicationsViewApplicationIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/applications/create'
    | '/applications'
    | '/contact'
    | '/dashboard'
    | '/applications/edit/$applicationId'
    | '/applications/view/$applicationId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/applications/create'
    | '/applications'
    | '/contact'
    | '/dashboard'
    | '/applications/edit/$applicationId'
    | '/applications/view/$applicationId'
  id:
    | '__root__'
    | '/'
    | '/applications/create'
    | '/applications/'
    | '/contact/'
    | '/dashboard/'
    | '/applications/edit/$applicationId'
    | '/applications/view/$applicationId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApplicationsCreateRoute: typeof ApplicationsCreateRoute
  ApplicationsIndexRoute: typeof ApplicationsIndexRoute
  ContactIndexRoute: typeof ContactIndexRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  ApplicationsEditApplicationIdRoute: typeof ApplicationsEditApplicationIdRoute
  ApplicationsViewApplicationIdRoute: typeof ApplicationsViewApplicationIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact/': {
      id: '/contact/'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/applications/': {
      id: '/applications/'
      path: '/applications'
      fullPath: '/applications'
      preLoaderRoute: typeof ApplicationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/applications/create': {
      id: '/applications/create'
      path: '/applications/create'
      fullPath: '/applications/create'
      preLoaderRoute: typeof ApplicationsCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/applications/view/$applicationId': {
      id: '/applications/view/$applicationId'
      path: '/applications/view/$applicationId'
      fullPath: '/applications/view/$applicationId'
      preLoaderRoute: typeof ApplicationsViewApplicationIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/applications/edit/$applicationId': {
      id: '/applications/edit/$applicationId'
      path: '/applications/edit/$applicationId'
      fullPath: '/applications/edit/$applicationId'
      preLoaderRoute: typeof ApplicationsEditApplicationIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApplicationsCreateRoute: ApplicationsCreateRoute,
  ApplicationsIndexRoute: ApplicationsIndexRoute,
  ContactIndexRoute: ContactIndexRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  ApplicationsEditApplicationIdRoute: ApplicationsEditApplicationIdRoute,
  ApplicationsViewApplicationIdRoute: ApplicationsViewApplicationIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
